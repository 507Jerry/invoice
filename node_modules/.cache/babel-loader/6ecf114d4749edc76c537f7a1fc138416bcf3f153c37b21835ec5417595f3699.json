{"ast":null,"code":"/**\r\n * Logo处理工具函数\r\n */\n\n// 支持的文件类型\nconst SUPPORTED_TYPES = ['image/png', 'image/jpeg', 'image/jpg', 'image/webp'];\nconst MAX_FILE_SIZE = 2 * 1024 * 1024; // 2MB\nconst MIN_IMAGE_SIZE = 30; // 最小尺寸（从50降低到30）\nconst MAX_IMAGE_SIZE = 1000; // 最大尺寸（从500增加到1000）\n\n/**\r\n * 验证文件类型\r\n * @param {File} file - 文件对象\r\n * @returns {boolean} - 是否支持\r\n */\nexport const validateFileType = file => {\n  return SUPPORTED_TYPES.includes(file.type);\n};\n\n/**\r\n * 验证文件大小\r\n * @param {File} file - 文件对象\r\n * @returns {boolean} - 是否在限制范围内\r\n */\nexport const validateFileSize = file => {\n  return file.size <= MAX_FILE_SIZE;\n};\n\n/**\r\n * 验证图片尺寸\r\n * @param {File} file - 文件对象\r\n * @returns {Promise<boolean>} - 是否在限制范围内\r\n */\nexport const validateImageSize = file => {\n  return new Promise(resolve => {\n    const img = new Image();\n    const url = URL.createObjectURL(file);\n    img.onload = () => {\n      URL.revokeObjectURL(url);\n      const isValid = img.width >= MIN_IMAGE_SIZE && img.height >= MIN_IMAGE_SIZE && img.width <= MAX_IMAGE_SIZE && img.height <= MAX_IMAGE_SIZE;\n      resolve(isValid);\n    };\n    img.onerror = () => {\n      URL.revokeObjectURL(url);\n      resolve(false);\n    };\n    img.src = url;\n  });\n};\n\n/**\r\n * 压缩图片\r\n * @param {File} file - 原始文件\r\n * @param {number} maxWidth - 最大宽度\r\n * @param {number} maxHeight - 最大高度\r\n * @param {number} quality - 压缩质量 (0-1)\r\n * @returns {Promise<string>} - Base64字符串\r\n */\nexport const compressImage = (file, maxWidth = 200, maxHeight = 200, quality = 0.8) => {\n  return new Promise((resolve, reject) => {\n    const canvas = document.createElement('canvas');\n    const ctx = canvas.getContext('2d');\n    const img = new Image();\n    img.onload = () => {\n      // 计算缩放比例\n      let {\n        width,\n        height\n      } = img;\n      if (width > maxWidth || height > maxHeight) {\n        const ratio = Math.min(maxWidth / width, maxHeight / height);\n        width *= ratio;\n        height *= ratio;\n      }\n\n      // 设置canvas尺寸\n      canvas.width = width;\n      canvas.height = height;\n\n      // 绘制图片\n      ctx.drawImage(img, 0, 0, width, height);\n\n      // 转换为Base64\n      try {\n        const base64 = canvas.toDataURL('image/png', quality);\n        resolve(base64);\n      } catch (error) {\n        reject(error);\n      }\n    };\n    img.onerror = () => {\n      reject(new Error('图片加载失败'));\n    };\n    img.src = URL.createObjectURL(file);\n  });\n};\n\n/**\r\n * 处理文件上传\r\n * @param {File} file - 文件对象\r\n * @returns {Promise<object>} - 处理结果\r\n */\nexport const processLogoUpload = async file => {\n  try {\n    // 验证文件类型\n    if (!validateFileType(file)) {\n      throw new Error('不支持的文件格式，请选择PNG、JPG或WebP格式');\n    }\n\n    // 验证文件大小\n    if (!validateFileSize(file)) {\n      throw new Error('文件太大，请选择小于2MB的图片');\n    }\n\n    // 验证图片尺寸\n    const isValidSize = await validateImageSize(file);\n    if (!isValidSize) {\n      throw new Error('图片尺寸不合适，建议使用30x30到1000x1000像素的图片');\n    }\n\n    // 压缩图片\n    const base64 = await compressImage(file);\n    return {\n      success: true,\n      data: base64,\n      originalFile: file\n    };\n  } catch (error) {\n    return {\n      success: false,\n      error: error.message\n    };\n  }\n};\n\n/**\r\n * 获取文件大小描述\r\n * @param {number} bytes - 字节数\r\n * @returns {string} - 格式化的大小\r\n */\nexport const formatFileSize = bytes => {\n  if (bytes === 0) return '0 Bytes';\n  const k = 1024;\n  const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n};","map":{"version":3,"names":["SUPPORTED_TYPES","MAX_FILE_SIZE","MIN_IMAGE_SIZE","MAX_IMAGE_SIZE","validateFileType","file","includes","type","validateFileSize","size","validateImageSize","Promise","resolve","img","Image","url","URL","createObjectURL","onload","revokeObjectURL","isValid","width","height","onerror","src","compressImage","maxWidth","maxHeight","quality","reject","canvas","document","createElement","ctx","getContext","ratio","Math","min","drawImage","base64","toDataURL","error","Error","processLogoUpload","isValidSize","success","data","originalFile","message","formatFileSize","bytes","k","sizes","i","floor","log","parseFloat","pow","toFixed"],"sources":["C:/Users/Guest1/invoice01/src/utils/logoUtils.js"],"sourcesContent":["/**\r\n * Logo处理工具函数\r\n */\r\n\r\n// 支持的文件类型\r\nconst SUPPORTED_TYPES = ['image/png', 'image/jpeg', 'image/jpg', 'image/webp'];\r\nconst MAX_FILE_SIZE = 2 * 1024 * 1024; // 2MB\r\nconst MIN_IMAGE_SIZE = 30; // 最小尺寸（从50降低到30）\r\nconst MAX_IMAGE_SIZE = 1000; // 最大尺寸（从500增加到1000）\r\n\r\n/**\r\n * 验证文件类型\r\n * @param {File} file - 文件对象\r\n * @returns {boolean} - 是否支持\r\n */\r\nexport const validateFileType = (file) => {\r\n  return SUPPORTED_TYPES.includes(file.type);\r\n};\r\n\r\n/**\r\n * 验证文件大小\r\n * @param {File} file - 文件对象\r\n * @returns {boolean} - 是否在限制范围内\r\n */\r\nexport const validateFileSize = (file) => {\r\n  return file.size <= MAX_FILE_SIZE;\r\n};\r\n\r\n/**\r\n * 验证图片尺寸\r\n * @param {File} file - 文件对象\r\n * @returns {Promise<boolean>} - 是否在限制范围内\r\n */\r\nexport const validateImageSize = (file) => {\r\n  return new Promise((resolve) => {\r\n    const img = new Image();\r\n    const url = URL.createObjectURL(file);\r\n    \r\n    img.onload = () => {\r\n      URL.revokeObjectURL(url);\r\n      const isValid = img.width >= MIN_IMAGE_SIZE && \r\n                     img.height >= MIN_IMAGE_SIZE &&\r\n                     img.width <= MAX_IMAGE_SIZE && \r\n                     img.height <= MAX_IMAGE_SIZE;\r\n      resolve(isValid);\r\n    };\r\n    \r\n    img.onerror = () => {\r\n      URL.revokeObjectURL(url);\r\n      resolve(false);\r\n    };\r\n    \r\n    img.src = url;\r\n  });\r\n};\r\n\r\n/**\r\n * 压缩图片\r\n * @param {File} file - 原始文件\r\n * @param {number} maxWidth - 最大宽度\r\n * @param {number} maxHeight - 最大高度\r\n * @param {number} quality - 压缩质量 (0-1)\r\n * @returns {Promise<string>} - Base64字符串\r\n */\r\nexport const compressImage = (file, maxWidth = 200, maxHeight = 200, quality = 0.8) => {\r\n  return new Promise((resolve, reject) => {\r\n    const canvas = document.createElement('canvas');\r\n    const ctx = canvas.getContext('2d');\r\n    const img = new Image();\r\n    \r\n    img.onload = () => {\r\n      // 计算缩放比例\r\n      let { width, height } = img;\r\n      if (width > maxWidth || height > maxHeight) {\r\n        const ratio = Math.min(maxWidth / width, maxHeight / height);\r\n        width *= ratio;\r\n        height *= ratio;\r\n      }\r\n      \r\n      // 设置canvas尺寸\r\n      canvas.width = width;\r\n      canvas.height = height;\r\n      \r\n      // 绘制图片\r\n      ctx.drawImage(img, 0, 0, width, height);\r\n      \r\n      // 转换为Base64\r\n      try {\r\n        const base64 = canvas.toDataURL('image/png', quality);\r\n        resolve(base64);\r\n      } catch (error) {\r\n        reject(error);\r\n      }\r\n    };\r\n    \r\n    img.onerror = () => {\r\n      reject(new Error('图片加载失败'));\r\n    };\r\n    \r\n    img.src = URL.createObjectURL(file);\r\n  });\r\n};\r\n\r\n/**\r\n * 处理文件上传\r\n * @param {File} file - 文件对象\r\n * @returns {Promise<object>} - 处理结果\r\n */\r\nexport const processLogoUpload = async (file) => {\r\n  try {\r\n    // 验证文件类型\r\n    if (!validateFileType(file)) {\r\n      throw new Error('不支持的文件格式，请选择PNG、JPG或WebP格式');\r\n    }\r\n    \r\n    // 验证文件大小\r\n    if (!validateFileSize(file)) {\r\n      throw new Error('文件太大，请选择小于2MB的图片');\r\n    }\r\n    \r\n         // 验证图片尺寸\r\n     const isValidSize = await validateImageSize(file);\r\n     if (!isValidSize) {\r\n       throw new Error('图片尺寸不合适，建议使用30x30到1000x1000像素的图片');\r\n     }\r\n    \r\n    // 压缩图片\r\n    const base64 = await compressImage(file);\r\n    \r\n    return {\r\n      success: true,\r\n      data: base64,\r\n      originalFile: file\r\n    };\r\n  } catch (error) {\r\n    return {\r\n      success: false,\r\n      error: error.message\r\n    };\r\n  }\r\n};\r\n\r\n/**\r\n * 获取文件大小描述\r\n * @param {number} bytes - 字节数\r\n * @returns {string} - 格式化的大小\r\n */\r\nexport const formatFileSize = (bytes) => {\r\n  if (bytes === 0) return '0 Bytes';\r\n  const k = 1024;\r\n  const sizes = ['Bytes', 'KB', 'MB', 'GB'];\r\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\r\n  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}